
int main()
{
	int a = 0, b = 1;
	// 用尽可能多的方式写多个lamber表达式实现a b交换
	auto swap1 = [](int& x1, int& x2)
				{
					int x = x1;
					x1 = x2;
					x2 = x;
				};

	swap1(a, b);
	cout << a << endl;
	cout << b << endl << endl;

	auto swap2 = [&a, &b]()
	{
		int x = a;
		a = b;
		b = x;
	};

	swap2();
	cout << a << endl;
	cout << b << endl << endl;

	auto swap3 = [&]()
	{
		int x = a;
		a = b;
		b = x;
	};

	swap3();
	cout << a << endl;
	cout << b << endl << endl;

	return 0;
}

#include <thread>
#include <mutex>

void add(int* px, int n, mutex* pmtx)
{
	//pmtx->lock();
	{
		lock_guard<mutex> lock(*pmtx);
		for (size_t i = 0; i < n; ++i)
		{
			++(*px);
		}
		//pmtx->unlock();
	}

	//for (size_t i = 0; i < n; ++i)
	//{
	//	pmtx->lock();
	//	++(*px);
	//	pmtx->unlock();
	//}
}

int main()
{
	int x = 0;
	std::mutex mtx;
	thread t1(add, &x, 1000000, &mtx);
	thread t2(add, &x, 1000000, &mtx);

	t1.join();
	t2.join();

	cout << x << endl;

	return 0;
}


#include <thread>
#include <mutex>
#include <atomic>

int main()
{
	//int x = 0;
	//std::mutex mtx;
	atomic<int> x = 0;
	size_t n = 1000000;
	thread t1;
	thread t2;

	t1 = thread([&]()
	{
		/*unique_lock<mutex> lock(mtx);
		for (size_t i = 0; i < n; ++i)
		{
			++x;
		}*/

		for (size_t i = 0; i < n; ++i)
		{
			++x;
		}
	});

	t2 = thread([&]()
	{
	/*	unique_lock<mutex> lock(mtx);
		for (size_t i = 0; i < n; ++i)
		{
			++x;
		}*/

		for (size_t i = 0; i < n; ++i)
		{
			++x;
		}
	});

	t1.join();
	t2.join();

	cout << x << endl;

	return 0;
}