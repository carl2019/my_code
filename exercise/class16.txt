//假如有编号为1~3的3张扑克牌和编号为1~3的3个盒子，现在需要将3张牌分别放到3个盒子中去
//且每个盒子只能放一张牌，一共有多少种不同的放法。
#include <vector>
#include <iostream>
using namespace std;
void Dfs(int index, int n, vector<int>& boxs, vector<int>& book)
{
	if (index == n + 1)
	{
		for (int i = 1; i <= n; i++)
			cout << boxs[i] << " ";
		cout << endl;
		return; //向上回退
	}
	for (int i = 1; i <= n; i++)
	{
		if (book[i] == 0)  //第i号牌仍在手上
		{
			boxs[index] = i;
			book[i] = 1;  //现在第i号牌已经被用了
			//处理下一个盒子
			Dfs(index + 1, n, boxs, book);
			//从下一个盒子回退到当前盒子，取出当前盒子的牌，
			//尝试放入其它牌。
			book[i] = 0;
		}
	}
}

class Solution {
public:
	void dfs(vector<int>& candidates, vector<vector<int>>& solutions,
		vector<int>& solution, int curSum,
		int prevPosition, int target)
	{
		//边界，如果大于等于目标，则结束
		if (curSum >= target)
		{
			//等于目标，找到一个组合
			if (curSum == target)
				solutions.push_back(solution);
			return;
		}
		//可以从上一个位置开始，因为元素可以重复
		for (int i = prevPosition; i < candidates.size(); ++i)
		{
			//单个值已经大于目标，直接跳过
			if (candidates[i] > target)
				continue;
			solution.push_back(candidates[i]);
			dfs(candidates, solutions, solution, curSum + candidates[i], i, target);
			//回溯，向上回退
			solution.pop_back();
		}
	}
	vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
		vector<vector<int>> solutions;
		vector<int> solution;
		if (candidates.empty())
			return solutions;
		int curSum = 0;
		dfs(candidates, solutions, solution, curSum, 0, target);
		return solutions;
	}
};