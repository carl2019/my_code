//N叉树的层序遍历
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        queue<Node*> q;
        if(root)
            q.push(root);
        vector<vector<int>> treeVec;
        while(!q.empty())
        {
            int sz = q.size();
            vector<int> rowNode;
            while(sz--)
            {
                Node* curNode = q.front();
                q.pop();
                //保存当前节点的值
                rowNode.push_back(curNode->val);
                for(auto& child : curNode->children)
                    q.push(child);
            }
            treeVec.push_back(rowNode);
        }
        return treeVec;
    }
};

//腐烂的橘子
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        static int pos[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        queue<pair<int, int>> q;
        if(grid.empty())
            return 0;
        int row = grid.size();
        int col = grid[0].size();
        //所有坏的入队
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(grid[i][j] == 2)
                    q.push(make_pair(i,j));
            }
        }
        int minTime = 0;
        while(!q.empty())
        {
            int flag = 0;
            int sz = q.size();
            while(sz--)
            {
                auto curPos = q.front();
                q.pop();
                for(int i = 0; i < 4; i++)
                {
                    int nx = curPos.first + pos[i][0];
                    int ny = curPos.second + pos[i][1];
                    if(nx < 0 || nx >= row || ny < 0 || ny >= col || grid[nx][ny] != 1)
                        continue;
                    flag = 1;
                    grid[nx][ny] = 2;
                    q.push(make_pair(nx, ny));
                }
            }
            if(flag)
                ++minTime;
        }
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(grid[i][j] == 1)
                    return -1;
            }
        }
        return minTime;
    }
};