//二叉树的前序遍历
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
    int TreeSize(struct TreeNode* root)
    {
        if(root == NULL)
            return 0;
        return TreeSize(root->left) + TreeSize(root->right) + 1;
    }

    void _preorderTraversal(struct TreeNode* root,int* preorder,int* pindex)
    {
        if(root == NULL)
        return;
    
        preorder[*pindex] = root->val;
        ++(*pindex);
    
        _preorderTraversal(root->left, preorder, pindex);
        _preorderTraversal(root->right, preorder, pindex);
    }

//二叉树的中序遍历
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
    size_t TreeSize(struct TreeNode* root)
    {
        if(root == NULL)
            return 0;
        return TreeSize(root->left) + TreeSize(root->right) + 1;
    }

    void _inorderTraversal(struct TreeNode* root,int* inorder,int* pindex)
    {
        if(root == NULL)
        return;
    
        _inorderTraversal(root->left, inorder, pindex);
        inorder[*pindex] = root->val;
        (*pindex)++;
        _inorderTraversal(root->right, inorder, pindex);
    }
    
    int* inorderTraversal(struct TreeNode* root, int* returnSize){
        *returnSize = TreeSize(root);
        int* inorder = (int*)malloc(*returnSize * sizeof(int));
        
        int index = 0;
        _inorderTraversal(root,inorder,&index);
    
        return inorder;
    }

//二叉树的后序遍历
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
    size_t TreeSize(struct TreeNode* root)
    {
        if(root == NULL)
            return 0;
        return TreeSize(root->left) + TreeSize(root->right) + 1;
    }

    void _postorderTraversal(struct TreeNode* root,int* postorder,int* pindex)
    {
        if(root == NULL)
        return;
    
        _postorderTraversal(root->left, postorder, pindex);
        _postorderTraversal(root->right, postorder, pindex);
        postorder[*pindex] = root->val;
        (*pindex)++;
    }
    
    int* postorderTraversal(struct TreeNode* root, int* returnSize){
        *returnSize = TreeSize(root);
        int* postorder = (int*)malloc(*returnSize * sizeof(int));
        
        int index = 0;
        _postorderTraversal(root,postorder,&index);
    
        return postorder;
    }

    
    int* preorderTraversal(struct TreeNode* root, int* returnSize){
        *returnSize = TreeSize(root);
        int* preorder = (int*)malloc(*returnSize * sizeof(int));
        
        int index = 0;
        _preorderTraversal(root,preorder,&index);
    
        return preorder;
    }
